/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IRandao {
  export type CampaignInfoStruct = {
    bnum: BigNumberish;
    deposit: BigNumberish;
    commitBalkline: BigNumberish;
    commitDeadline: BigNumberish;
    random: BigNumberish;
    settled: boolean;
    bountypot: BigNumberish;
    commitNum: BigNumberish;
    revealsNum: BigNumberish;
  };

  export type CampaignInfoStructOutput = [
    bnum: bigint,
    deposit: bigint,
    commitBalkline: bigint,
    commitDeadline: bigint,
    random: bigint,
    settled: boolean,
    bountypot: bigint,
    commitNum: bigint,
    revealsNum: bigint
  ] & {
    bnum: bigint;
    deposit: bigint;
    commitBalkline: bigint;
    commitDeadline: bigint;
    random: bigint;
    settled: boolean;
    bountypot: bigint;
    commitNum: bigint;
    revealsNum: bigint;
  };
}

export interface RandaoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_numCampaigns"
      | "campaigns"
      | "commit"
      | "follow"
      | "founder"
      | "getCampaign"
      | "getCommitment"
      | "getMyBounty"
      | "getRandom"
      | "newCampaign"
      | "numCampaigns"
      | "refundBounty"
      | "reveal"
      | "shaCommit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogCampaignAdded"
      | "LogCommit"
      | "LogFollow"
      | "LogGetRandom"
      | "LogReveal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_numCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "follow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "founder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyBounty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newCampaign",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "numCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundBounty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shaCommit",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_numCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "follow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "founder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRandom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shaCommit", data: BytesLike): Result;
}

export namespace LogCampaignAddedEvent {
  export type InputTuple = [
    campaignID: BigNumberish,
    from: AddressLike,
    currbNum: BigNumberish,
    bnum: BigNumberish,
    deposit: BigNumberish,
    commitBalkline: BigNumberish,
    commitDeadline: BigNumberish,
    bountypot: BigNumberish,
    maxParticipant: BigNumberish
  ];
  export type OutputTuple = [
    campaignID: bigint,
    from: string,
    currbNum: bigint,
    bnum: bigint,
    deposit: bigint,
    commitBalkline: bigint,
    commitDeadline: bigint,
    bountypot: bigint,
    maxParticipant: bigint
  ];
  export interface OutputObject {
    campaignID: bigint;
    from: string;
    currbNum: bigint;
    bnum: bigint;
    deposit: bigint;
    commitBalkline: bigint;
    commitDeadline: bigint;
    bountypot: bigint;
    maxParticipant: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogCommitEvent {
  export type InputTuple = [
    CampaignId: BigNumberish,
    from: AddressLike,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    CampaignId: bigint,
    from: string,
    commitment: string
  ];
  export interface OutputObject {
    CampaignId: bigint;
    from: string;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFollowEvent {
  export type InputTuple = [
    CampaignId: BigNumberish,
    from: AddressLike,
    bountypot: BigNumberish
  ];
  export type OutputTuple = [
    CampaignId: bigint,
    from: string,
    bountypot: bigint
  ];
  export interface OutputObject {
    CampaignId: bigint;
    from: string;
    bountypot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogGetRandomEvent {
  export type InputTuple = [CampaignId: BigNumberish, random: BigNumberish];
  export type OutputTuple = [CampaignId: bigint, random: bigint];
  export interface OutputObject {
    CampaignId: bigint;
    random: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRevealEvent {
  export type InputTuple = [
    CampaignId: BigNumberish,
    from: AddressLike,
    secret: BigNumberish
  ];
  export type OutputTuple = [CampaignId: bigint, from: string, secret: bigint];
  export interface OutputObject {
    CampaignId: bigint;
    from: string;
    secret: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Randao extends BaseContract {
  connect(runner?: ContractRunner | null): Randao;
  waitForDeployment(): Promise<this>;

  interface: RandaoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _numCampaigns: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        bnum: bigint;
        deposit: bigint;
        commitBalkline: bigint;
        commitDeadline: bigint;
        random: bigint;
        settled: boolean;
        bountypot: bigint;
        commitNum: bigint;
        revealsNum: bigint;
        maxParticipant: bigint;
      }
    ],
    "view"
  >;

  commit: TypedContractMethod<
    [_campaignID: BigNumberish, _hs: BytesLike],
    [void],
    "payable"
  >;

  follow: TypedContractMethod<
    [_campaignID: BigNumberish],
    [boolean],
    "payable"
  >;

  founder: TypedContractMethod<[], [string], "view">;

  getCampaign: TypedContractMethod<
    [_campaignID: BigNumberish],
    [IRandao.CampaignInfoStructOutput],
    "view"
  >;

  getCommitment: TypedContractMethod<
    [_campaignID: BigNumberish],
    [string],
    "view"
  >;

  getMyBounty: TypedContractMethod<
    [_campaignID: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getRandom: TypedContractMethod<
    [_campaignID: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  newCampaign: TypedContractMethod<
    [
      _bnum: BigNumberish,
      _deposit: BigNumberish,
      _commitBalkline: BigNumberish,
      _commitDeadline: BigNumberish,
      _maxTxFee: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  numCampaigns: TypedContractMethod<[], [bigint], "view">;

  refundBounty: TypedContractMethod<
    [_campaignID: BigNumberish],
    [void],
    "nonpayable"
  >;

  reveal: TypedContractMethod<
    [_campaignID: BigNumberish, _s: BigNumberish],
    [void],
    "nonpayable"
  >;

  shaCommit: TypedContractMethod<[_s: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_numCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        bnum: bigint;
        deposit: bigint;
        commitBalkline: bigint;
        commitDeadline: bigint;
        random: bigint;
        settled: boolean;
        bountypot: bigint;
        commitNum: bigint;
        revealsNum: bigint;
        maxParticipant: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "commit"
  ): TypedContractMethod<
    [_campaignID: BigNumberish, _hs: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "follow"
  ): TypedContractMethod<[_campaignID: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "founder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [_campaignID: BigNumberish],
    [IRandao.CampaignInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCommitment"
  ): TypedContractMethod<[_campaignID: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMyBounty"
  ): TypedContractMethod<[_campaignID: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getRandom"
  ): TypedContractMethod<[_campaignID: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "newCampaign"
  ): TypedContractMethod<
    [
      _bnum: BigNumberish,
      _deposit: BigNumberish,
      _commitBalkline: BigNumberish,
      _commitDeadline: BigNumberish,
      _maxTxFee: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "numCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundBounty"
  ): TypedContractMethod<[_campaignID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reveal"
  ): TypedContractMethod<
    [_campaignID: BigNumberish, _s: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shaCommit"
  ): TypedContractMethod<[_s: BigNumberish], [string], "view">;

  getEvent(
    key: "LogCampaignAdded"
  ): TypedContractEvent<
    LogCampaignAddedEvent.InputTuple,
    LogCampaignAddedEvent.OutputTuple,
    LogCampaignAddedEvent.OutputObject
  >;
  getEvent(
    key: "LogCommit"
  ): TypedContractEvent<
    LogCommitEvent.InputTuple,
    LogCommitEvent.OutputTuple,
    LogCommitEvent.OutputObject
  >;
  getEvent(
    key: "LogFollow"
  ): TypedContractEvent<
    LogFollowEvent.InputTuple,
    LogFollowEvent.OutputTuple,
    LogFollowEvent.OutputObject
  >;
  getEvent(
    key: "LogGetRandom"
  ): TypedContractEvent<
    LogGetRandomEvent.InputTuple,
    LogGetRandomEvent.OutputTuple,
    LogGetRandomEvent.OutputObject
  >;
  getEvent(
    key: "LogReveal"
  ): TypedContractEvent<
    LogRevealEvent.InputTuple,
    LogRevealEvent.OutputTuple,
    LogRevealEvent.OutputObject
  >;

  filters: {
    "LogCampaignAdded(uint256,address,uint256,uint256,uint256,uint16,uint16,uint256,uint256)": TypedContractEvent<
      LogCampaignAddedEvent.InputTuple,
      LogCampaignAddedEvent.OutputTuple,
      LogCampaignAddedEvent.OutputObject
    >;
    LogCampaignAdded: TypedContractEvent<
      LogCampaignAddedEvent.InputTuple,
      LogCampaignAddedEvent.OutputTuple,
      LogCampaignAddedEvent.OutputObject
    >;

    "LogCommit(uint256,address,bytes32)": TypedContractEvent<
      LogCommitEvent.InputTuple,
      LogCommitEvent.OutputTuple,
      LogCommitEvent.OutputObject
    >;
    LogCommit: TypedContractEvent<
      LogCommitEvent.InputTuple,
      LogCommitEvent.OutputTuple,
      LogCommitEvent.OutputObject
    >;

    "LogFollow(uint256,address,uint256)": TypedContractEvent<
      LogFollowEvent.InputTuple,
      LogFollowEvent.OutputTuple,
      LogFollowEvent.OutputObject
    >;
    LogFollow: TypedContractEvent<
      LogFollowEvent.InputTuple,
      LogFollowEvent.OutputTuple,
      LogFollowEvent.OutputObject
    >;

    "LogGetRandom(uint256,uint256)": TypedContractEvent<
      LogGetRandomEvent.InputTuple,
      LogGetRandomEvent.OutputTuple,
      LogGetRandomEvent.OutputObject
    >;
    LogGetRandom: TypedContractEvent<
      LogGetRandomEvent.InputTuple,
      LogGetRandomEvent.OutputTuple,
      LogGetRandomEvent.OutputObject
    >;

    "LogReveal(uint256,address,uint256)": TypedContractEvent<
      LogRevealEvent.InputTuple,
      LogRevealEvent.OutputTuple,
      LogRevealEvent.OutputObject
    >;
    LogReveal: TypedContractEvent<
      LogRevealEvent.InputTuple,
      LogRevealEvent.OutputTuple,
      LogRevealEvent.OutputObject
    >;
  };
}
